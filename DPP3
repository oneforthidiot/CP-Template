//Q7 Bishu and Powers

void solve(){
    ll n;
	cin>>n;
	vi arr(n);
	for(int i=0;i<n;i++)cin>>arr[i];
	sort(arr.begin(),arr.end());
	int q;
	cin>>q;
	vi pref(n);
	pref[0]=arr[0];
	for(int i=1;i<n;i++)pref[i]=pref[i-1]+arr[i];
	while(q--){
		int x;
		cin>>x;
		auto it=upper_bound(arr.begin(),arr.end(),x);
		int idx=it-arr.begin();
		cout<<idx<<" "<<pref[idx-1]<<endl;
	}
}

//Q6 Longest Plindromic Subsequence

int longestPalinSubseq(string A) {
        string B=A;
        reverse(B.begin(),B.end());
        int n=A.length();
        int dp[n+1][n+1];
        memset(dp,0,sizeof(dp));
        for(int i=1;i<=n;i++){
            for(int j=1;j<=n;j++){
                if(A[i-1]==B[j-1]){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else{
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[n][n];
    }

// Q5 Egg Dropping

int dp[101][101];
    int rec(int n,int k){
       if(k<=1 or n==1)return k;
       if(dp[n][k]!=-1)return dp[n][k];
        int ans=INT_MAX;
        for(int i=1;i<=k;i++){
            int temp=max(rec(n-1,i-1),rec(n,k-i));
            ans=min(ans,temp);
        }
        return dp[n][k]=ans+1; 
    }
    int eggDrop(int n, int k) {
        memset(dp,-1,sizeof(dp));
        int ans=rec(n,k);
        return ans;
    }

//Q4 Matrix Chain Multiplication 

int rec(int arr[],int l,int r){
        if(l==r)return 0;
        if(dp[l][r]!=-1)return dp[l][r];
        int ans=INT_MAX;
        for(int i=l;i<r;i++){
            int temp=(arr[l-1]*arr[i]*arr[r])+rec(arr,i+1,r)+rec(arr,l,i);
            ans=min(ans,temp);
        }
        return dp[l][r]=ans;
    }
    int matrixMultiplication(int N, int arr[])
    {
        vector<vector<int>> dp(N+1,vector<int>(N+1,INT_MAX));
        for(int i=0;i<=N;i++){
            dp[i][i]=0;
        }
        for(int l=N-1;l>=1;l--){
            for(int r=0;r<N;r++){
                if(l>=r)continue;
                for(int i=l;i<r;i++){
                    int temp=(arr[l-1]*arr[i]*arr[r])+dp[i+1][r]+dp[l][i];
                    dp[l][r]=min(dp[l][r],temp);
                }
            }
        }
        return dp[1][N-1];
    }

//Q3 Given a Sequence of Word, Print all its Anagrams
vector<vector<string> > Anagrams(vector<string>& string_list) {
        vector<pair<string,int>> st;
        int n=string_list.size();
        for(int i=0;i<n;i++){
            string temp=string_list[i];
            sort(temp.begin(),temp.end());
            st.push_back({temp,i});
        }
        map<string,vector<int>> vp;
        for(auto it:st){
            vp[it.first].push_back(it.second);
        }
        vector<vector<string>> ans;
        for(auto it:vp){
            vector<string> temp;
            for(auto i:it.second){
                temp.push_back(string_list[i]);
            }
            // sort(temp.begin(),temp.end());
            ans.push_back(temp);
        }
        return ans;
    }
