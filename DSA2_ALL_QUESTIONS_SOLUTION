Q1
// Rotate matrix by 90* in AntiCloclwise
void rotate(vector<vector<int> >& matrix){
    for(auto &it:matrix){
        reverse(it.begin(),it.end());
    }
    int n=matrix.size();
    for(int i=0;i<n;i++){
        for(int j=i;j<n;j++){
            swap(matrix[i][j],matrix[j][i]);
        }
    }
}

Q2. 
//Palindrome String
bool isPlain(string str){
  int i=0,j=str.length()-1;
  while(i<j){
    if(str[i]!=str[j])return false;
    i++;
    j--;
  }
  return true;
}

Q4.
//Isomorphic Strings
bool areIsomorphic(string str1, string str2){
        map<char,char> mp;
        int n=str1.length();
        int m=str2.length();
        if(n!=m)return 0;
        set<char> st;
        for(char c='a';c<='z';c++)st.insert(c);
        for(int i=0;i<n;i++){
            if(mp.find(str1[i])==mp.end()){
                if(st.find(str2[i])!=st.end()){
                    mp[str1[i]]=str2[i];
                    st.erase(str2[i]);
                }
                else return 0;
            }
            else{
                if(mp[str1[i]]!=str2[i])return 0;
            }
        }
        return 1;
    }

Q6.
//Minimim number of characters to remove, delete, add to make equal
int dp[501][501];
class Solution {
public:
    int dp1(string word1,string word2,int idx1,int idx2){
        if(idx1<=0)return idx2;
        if(idx2<=0)return idx1;
        if(dp[idx1][idx2]!=-1)return dp[idx1][idx2];
        int ans=0;
        if(word1[idx1-1]==word2[idx2-1]){
            ans=dp1(word1,word2,idx1-1,idx2-1);
        }
        else{
            ans=1+min({dp1(word1,word2,idx1-1,idx2),dp1(word1,word2,idx1,idx2-1),dp1(word1,word2,idx1-1,idx2-1)});
        }
        return dp[idx1][idx2]=ans;
    }
    int minDistance(string word1, string word2) {
        // n1-1, n2-1, n1-1 n2-1
        memset(dp,0,sizeof(dp));
        int n1=word1.length();
        int n2=word2.length();
        int ans=0;
        for(int i=0;i<=n1;i++){
            dp[i][0]=i;
        }
        for(int i=0;i<=n2;i++){
            dp[0][i]=i;
        }
        dp[0][0]=0;
        for(int idx1=1;idx1<=n1;idx1++){
            for(int idx2=1;idx2<=n2;idx2++){
                if(word1[idx1-1]==word2[idx2-1]){
                    dp[idx1][idx2]=dp[idx1-1][idx2-1];
                }
                else{
                    dp[idx1][idx2]=1+min({dp[idx1-1][idx2],dp[idx1][idx2-1],dp[idx1-1][idx2-1]});
                }
            }
        }
        return dp[n1][n2];
    }
};

Q8 and Q9
// Printing LCS and finding LCS
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int n1=text1.length();
        int n2=text2.length();
        int dp[n1+1][n2+1];
        memset(dp,0,sizeof(dp));
        for(int i=1;i<=n1;i++){
            for(int j=1;j<=n2;j++){
                if(text1[i-1]==text2[j-1]){
                    dp[i][j]=dp[i-1][j-1]+1;
                }
                else{
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        for(int i=0;i<=n1;i++){
            for(int j=0;j<=n2;j++){
                cout<<dp[i][j]<<" ";
            }
            cout<<endl;
        }
        int i=n1,j=n2;
        string ans="";
        while(i>0 and j>0){
            if(text1[i-1]==text2[j-1]){
                ans.push_back(text1[i-1]);
                i--;
                j--;
            }
            else{
                if(dp[i-1][j]>dp[i][j-1]){
                    i--;
                }
                else{
                    j--;
                }
            }
        }
        reverse(ans.begin(),ans.end());
        cout<<ans<<endl;
        return dp[n1][n2];
    }
};

Q10.
//Print Shortest Common SuperSequence
    string shortestCommonSupersequence(string str1, string str2) {
        int dp[1001][1001];
        memset(dp,0,sizeof(dp));
        int n=str1.length();
        int m=str2.length();
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(str1[i-1]!=str2[j-1]){
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
                else{
                    dp[i][j]=1+dp[i-1][j-1];
                }
            }
        }
        string ans="";
        int i=n,j=m;
        while(i>0 and j>0){
            if(str1[i-1]==str2[j-1]){
                ans.push_back(str1[i-1]);
                i--;
                j--;
            }
            else{
                if(dp[i-1][j]>=dp[i][j-1]){
                    ans.push_back(str1[i-1]);
                    i--;
                }
                else{
                    ans.push_back(str2[j-1]);
                    j--;
                }
            }
        }
        while(i>0){
            ans.push_back(str1[i-1]);
            i--;
        }
        while(j>0){
            ans.push_back(str2[j-1]);
            j--;
        }
        for(int i=0;i<=n;i++){
            for(int j=0;j<=m;j++){
                cout<<dp[i][j]<<" ";
            }
            cout<<endl;
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
