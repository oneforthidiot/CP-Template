// Q5 subset sum problem

bool isSubsetSum(vector<int>arr, int sum){
        int n=arr.size();
        int dp[n+1][sum+1];
        for(int i=0;i<=n;i++){
            dp[i][0]=1;
        }
        for(int i=1;i<=sum;i++){
            dp[0][i]=0;
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=sum;j++){
                if(arr[i-1]<=j){
                    dp[i][j]=(dp[i-1][j] or dp[i-1][j-arr[i-1]]);
                }
                else{
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        return dp[n][sum];
    }

//Q4 Unbounded Knapsack Problem

int knapSack(int N, int W, int val[], int wt[]){
        int dp[N+1][W+1];
        memset(dp,0,sizeof(dp));
        for(int i=1;i<=N;i++){
            for(int j=1;j<=W;j++){
                if(wt[i-1]<=j){
                    dp[i][j]=max(dp[i-1][j],dp[i][j-wt[i-1]]+val[i-1]);
                }
                else{
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        return dp[N][W];
    }

//Q3 Rod Cutting Problem

int cutRod(int price[], int n) {
        int rod[n];
        for(int i=1;i<=n;i++)rod[i-1]=i;
        int dp[n+1][n+1];
        memset(dp,0,sizeof(dp));
        for(int i=1;i<=n;i++){
            for(int j=1;j<=n;j++){
                if(rod[i-1]<=j){
                    dp[i][j]=max(dp[i-1][j],dp[i][j-rod[i-1]]+price[i-1]);
                }
                else{
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        return dp[n][n];
    }

//Q2 Coin Change Problem

long long int count(int coins[], int N, int sum) {
        long long dp[N+1][sum+1];
        for(int i=0;i<=N;i++){
            dp[i][0]=1;
        }
        for(int j=0;j<=sum;j++){
            dp[0][j]=0;
        }
        for(int i=1;i<=N;i++){
            for(int j=1;j<=sum;j++){
                if(coins[i-1]<=j){
                    dp[i][j]=(dp[i-1][j]+dp[i][j-coins[i-1]]);
                }
                else{
                    dp[i][j]=(dp[i-1][j]);
                }
            }
        }
        return dp[N][sum];
    }
