// DSA Class Notes

// Q1.
void solve(){
     int n;
     cin>>n;
     int arr[n];
     for(int i=0;i<n;i++){
        cin>>arr[i];
     }
     int mx=arr[0];
     int curr=arr[0];
     for(int i=1;i<n;i++){
        curr=max(arr[i],curr+arr[i]);
        mx=max(curr,mx);
     }
     cout<<mx<<endl;
     //O(n) Kadanae's Algo
}  

//Q2
void solve(){
     // Left Roatate an Array D
     int n,d;
     cin>>n>>d;
     int arr[n];
     for(int i=0;i<n;i++){
        cin>>arr[i];
     }
     vector<int> ans;
     for(int i=d;i<n;i++){
        ans.push_back(arr[i]);
     }
     for(int i=0;i<d;i++){
        ans.push_back(arr[i]);
     }
     for(auto it:ans)cout<<it<<" ";
}  

// Q3
void solve(){
    // Leader of array
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    int suff[n];
    suff[n-1]=arr[n-1];
    for(int i=n-2;i>=0;i--){
        suff[i]=max(suff[i+1],arr[i]);
    }
    vector<int> ans;
    for(int i=0;i<n;i++){
        if(arr[i]==suff[i]){
            ans.push_back(arr[i]);
        }
    }
    for(auto it:ans)cout<<it<<" ";
}

// Q4
void solve(){
    // Stock Selling
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    int curr=-arr[0];
    int mx=0;
    for(int i=1;i<n;i++){
        curr=max(curr,mx-arr[i]);
        mx=max(mx,curr+arr[i]);
    }
    cout<<mx<<endl;

}  
// Q5
void solve(){
    // Circular Subarray Maximum Subarray
    int n;
    cin>>n;
    int arr[n];
    int sum=0;
    for(int i=0;i<n;i++){
        cin>>arr[i];
        sum+=arr[i];
    }
    int mx_so_far=arr[0],mn_so_far=arr[0];
    int mx=arr[0],mn=arr[0];
    for(int i=1;i<n;i++){
        mx=max(arr[i],mx+arr[i]);
        mx_so_far=max(mx_so_far,mx);
        mn=min(arr[i],mn+arr[i]);
        mn_so_far=min(mn,mn_so_far);
    }
    int ans=max(mx_so_far,sum-mn_so_far);
    cout<<ans<<endl;

}

// Q7
void solve(){
    // Max subarray of 3 size
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    int mx=arr[0]+arr[1]+arr[2];
    int sum=mx;
    for(int i=3;i<n;i++){
        sum-=arr[i-3];
        sum+=arr[i];
        mx=max(mx,sum);
    }
    cout<<mx<<endl;

}

// Q6

void solve(){
    // Max subarray of 3 size
    int n1,n2;
    cin>>n1>>n2;
    int arr1[n1],arr2[n2];
    for(int i=0;i<n1;i++){
        cin>>arr1[i];;
    }
    for(int i=0;i<n2;i++){
        cin>>arr2[i];
    }
    sort(arr1,arr1+n1);
    sort(arr2,arr2+n2);
    cout<<arr1[n1/2]<<" "<<arr2[n2/2]<<endl;

}

// Q7 Extended
void solve(){
    // Q7 (also Printing Subarray)
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    int mx=arr[0]+arr[1]+arr[2];
    deque<int> dq={arr[0],arr[1],arr[2]};
    int sum=mx;
    deque<int> ans=dq;
    for(int i=3;i<n;i++){
        sum-=arr[i-3];
        sum+=arr[i];
        dq.pop_front();
        dq.push_back(arr[i]);
        if(sum>=mx){
            mx=sum;
            ans=dq;
        }
        mx=max(mx,sum);
    }
    show(ans)cout<<line;
    cout<<mx<<endl;
} 

//Q8 Valentine Day problem

void solve(){
    // Valentine Day Problem
    int sz=7;
    string str;
    for(int i=0;i<7;i++){
        char ch;
        cin>>ch;
        str+=ch;
    }
    int n;
    cin>>n;
    map<char,int> mp;
    multiset<char> mst;
    int j=0,i=0;
    int ans=0;
    while(i<sz){
        mp[str[i]]++;
        mst.insert(str[i]);
        while(mp.size()>n){
            if(mp[str[j]]==1){
                mp.erase(str[j]);
                mst.erase(mst.find(str[j]));
            }
            else{
                mp[str[j]]--;
                mst.erase(mst.find(str[j]));
            }
            j++;
        }
        ans=max(ans,(int)mst.size());
        i++;
        }
        cout<<ans<<line;
    }


//(9) Interpoliation Search
int interpoliationsearch(int arr[],int x,int lo,int hi){
    if(lo>=hi)return -1;
    if(x<arr[lo] or x>arr[hi])return -1;
    int idx=lo+(int)(double(hi-lo)/double(arr[hi]-arr[lo]))*(x-arr[lo]);
    if(arr[idx]==x)return idx;
    if(arr[idx]>x){
        return interpoliationsearch(arr,x,lo,idx-1);
    }
    else{
        return interpoliationsearch(arr,x,idx+1,hi);
    }
}

// Fibonacci Search
// Longest Perfect Prefix which is Also a Suffix
// Search for Median in Matrix with rows sorted
